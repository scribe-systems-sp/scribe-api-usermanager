"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * UsersManager
 * Scribe user management
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("./common");
// @ts-ignore
const base_1 = require("./base");
/**
 * APIKeysApi - axios parameter creator
 * @export
 */
exports.APIKeysApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Creates key similar to access token, but without expire time. This key will be stored at server and can be revoked at any moment.
         * @summary Create Api Key
         * @param {string} username
         * @param {string} password
         * @param {string} [grantType]
         * @param {string} [scope]
         * @param {string} [clientId]
         * @param {string} [clientSecret]
         * @param {string} [apikeyDescription]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthApikeysCreateApiKey: (username, password, grantType, scope, clientId, clientSecret, apikeyDescription, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'username' is not null or undefined
            common_1.assertParamExists('apiV1AuthApikeysCreateApiKey', 'username', username);
            // verify required parameter 'password' is not null or undefined
            common_1.assertParamExists('apiV1AuthApikeysCreateApiKey', 'password', password);
            const localVarPath = `/usermanager/api/v1/auth/apikeys/apikey`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new URLSearchParams();
            if (grantType !== undefined) {
                localVarFormParams.set('grant_type', grantType);
            }
            if (username !== undefined) {
                localVarFormParams.set('username', username);
            }
            if (password !== undefined) {
                localVarFormParams.set('password', password);
            }
            if (scope !== undefined) {
                localVarFormParams.set('scope', scope);
            }
            if (clientId !== undefined) {
                localVarFormParams.set('client_id', clientId);
            }
            if (clientSecret !== undefined) {
                localVarFormParams.set('client_secret', clientSecret);
            }
            if (apikeyDescription !== undefined) {
                localVarFormParams.set('apikey_description', apikeyDescription);
            }
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = localVarFormParams.toString();
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Delete Api Key
         * @param {APIKeyRequest} aPIKeyRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthApikeysDeleteApiKey: (aPIKeyRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'aPIKeyRequest' is not null or undefined
            common_1.assertParamExists('apiV1AuthApikeysDeleteApiKey', 'aPIKeyRequest', aPIKeyRequest);
            const localVarPath = `/usermanager/api/v1/auth/apikeys/apikey`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication OAuth2PasswordBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(aPIKeyRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get Api Keys
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthApikeysGetApiKeys: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/usermanager/api/v1/auth/apikeys/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication OAuth2PasswordBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * APIKeysApi - functional programming interface
 * @export
 */
exports.APIKeysApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.APIKeysApiAxiosParamCreator(configuration);
    return {
        /**
         * Creates key similar to access token, but without expire time. This key will be stored at server and can be revoked at any moment.
         * @summary Create Api Key
         * @param {string} username
         * @param {string} password
         * @param {string} [grantType]
         * @param {string} [scope]
         * @param {string} [clientId]
         * @param {string} [clientSecret]
         * @param {string} [apikeyDescription]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthApikeysCreateApiKey(username, password, grantType, scope, clientId, clientSecret, apikeyDescription, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiV1AuthApikeysCreateApiKey(username, password, grantType, scope, clientId, clientSecret, apikeyDescription, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Delete Api Key
         * @param {APIKeyRequest} aPIKeyRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthApikeysDeleteApiKey(aPIKeyRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiV1AuthApikeysDeleteApiKey(aPIKeyRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Get Api Keys
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthApikeysGetApiKeys(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiV1AuthApikeysGetApiKeys(options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
/**
 * APIKeysApi - factory interface
 * @export
 */
exports.APIKeysApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.APIKeysApiFp(configuration);
    return {
        /**
         * Creates key similar to access token, but without expire time. This key will be stored at server and can be revoked at any moment.
         * @summary Create Api Key
         * @param {string} username
         * @param {string} password
         * @param {string} [grantType]
         * @param {string} [scope]
         * @param {string} [clientId]
         * @param {string} [clientSecret]
         * @param {string} [apikeyDescription]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthApikeysCreateApiKey(username, password, grantType, scope, clientId, clientSecret, apikeyDescription, options) {
            return localVarFp.apiV1AuthApikeysCreateApiKey(username, password, grantType, scope, clientId, clientSecret, apikeyDescription, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Delete Api Key
         * @param {APIKeyRequest} aPIKeyRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthApikeysDeleteApiKey(aPIKeyRequest, options) {
            return localVarFp.apiV1AuthApikeysDeleteApiKey(aPIKeyRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get Api Keys
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthApikeysGetApiKeys(options) {
            return localVarFp.apiV1AuthApikeysGetApiKeys(options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * APIKeysApi - object-oriented interface
 * @export
 * @class APIKeysApi
 * @extends {BaseAPI}
 */
class APIKeysApi extends base_1.BaseAPI {
    /**
     * Creates key similar to access token, but without expire time. This key will be stored at server and can be revoked at any moment.
     * @summary Create Api Key
     * @param {string} username
     * @param {string} password
     * @param {string} [grantType]
     * @param {string} [scope]
     * @param {string} [clientId]
     * @param {string} [clientSecret]
     * @param {string} [apikeyDescription]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIKeysApi
     */
    apiV1AuthApikeysCreateApiKey(username, password, grantType, scope, clientId, clientSecret, apikeyDescription, options) {
        return exports.APIKeysApiFp(this.configuration).apiV1AuthApikeysCreateApiKey(username, password, grantType, scope, clientId, clientSecret, apikeyDescription, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Delete Api Key
     * @param {APIKeyRequest} aPIKeyRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIKeysApi
     */
    apiV1AuthApikeysDeleteApiKey(aPIKeyRequest, options) {
        return exports.APIKeysApiFp(this.configuration).apiV1AuthApikeysDeleteApiKey(aPIKeyRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get Api Keys
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIKeysApi
     */
    apiV1AuthApikeysGetApiKeys(options) {
        return exports.APIKeysApiFp(this.configuration).apiV1AuthApikeysGetApiKeys(options).then((request) => request(this.axios, this.basePath));
    }
}
exports.APIKeysApi = APIKeysApi;
/**
 * AccessRightsApi - axios parameter creator
 * @export
 */
exports.AccessRightsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Assigns privilege to the role
         * @summary Assign Privilege
         * @param {BodyAssignPrivilegeApiV1AccessrightsManagingAssignPrivilegePatch} bodyAssignPrivilegeApiV1AccessrightsManagingAssignPrivilegePatch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AccessrightsManagingAssignPrivilege: (bodyAssignPrivilegeApiV1AccessrightsManagingAssignPrivilegePatch, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'bodyAssignPrivilegeApiV1AccessrightsManagingAssignPrivilegePatch' is not null or undefined
            common_1.assertParamExists('apiV1AccessrightsManagingAssignPrivilege', 'bodyAssignPrivilegeApiV1AccessrightsManagingAssignPrivilegePatch', bodyAssignPrivilegeApiV1AccessrightsManagingAssignPrivilegePatch);
            const localVarPath = `/usermanager/api/v1/accessrights/managing/assignPrivilege`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication OAuth2PasswordBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(bodyAssignPrivilegeApiV1AccessrightsManagingAssignPrivilegePatch, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Assign Role
         * @param {BodyAssignRoleApiV1AccessrightsManagingAssignRolePatch} bodyAssignRoleApiV1AccessrightsManagingAssignRolePatch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AccessrightsManagingAssignRole: (bodyAssignRoleApiV1AccessrightsManagingAssignRolePatch, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'bodyAssignRoleApiV1AccessrightsManagingAssignRolePatch' is not null or undefined
            common_1.assertParamExists('apiV1AccessrightsManagingAssignRole', 'bodyAssignRoleApiV1AccessrightsManagingAssignRolePatch', bodyAssignRoleApiV1AccessrightsManagingAssignRolePatch);
            const localVarPath = `/usermanager/api/v1/accessrights/managing/assignRole`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication OAuth2PasswordBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(bodyAssignRoleApiV1AccessrightsManagingAssignRolePatch, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Removes privilege from the role
         * @summary Remove Privilege
         * @param {BodyRemovePrivilegeApiV1AccessrightsManagingRemovePrivilegePatch} bodyRemovePrivilegeApiV1AccessrightsManagingRemovePrivilegePatch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AccessrightsManagingRemovePrivilege: (bodyRemovePrivilegeApiV1AccessrightsManagingRemovePrivilegePatch, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'bodyRemovePrivilegeApiV1AccessrightsManagingRemovePrivilegePatch' is not null or undefined
            common_1.assertParamExists('apiV1AccessrightsManagingRemovePrivilege', 'bodyRemovePrivilegeApiV1AccessrightsManagingRemovePrivilegePatch', bodyRemovePrivilegeApiV1AccessrightsManagingRemovePrivilegePatch);
            const localVarPath = `/usermanager/api/v1/accessrights/managing/removePrivilege`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication OAuth2PasswordBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(bodyRemovePrivilegeApiV1AccessrightsManagingRemovePrivilegePatch, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Removes role from the user
         * @summary Remove Role
         * @param {BodyRemoveRoleApiV1AccessrightsManagingRemoveRolePatch} bodyRemoveRoleApiV1AccessrightsManagingRemoveRolePatch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AccessrightsManagingRemoveRole: (bodyRemoveRoleApiV1AccessrightsManagingRemoveRolePatch, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'bodyRemoveRoleApiV1AccessrightsManagingRemoveRolePatch' is not null or undefined
            common_1.assertParamExists('apiV1AccessrightsManagingRemoveRole', 'bodyRemoveRoleApiV1AccessrightsManagingRemoveRolePatch', bodyRemoveRoleApiV1AccessrightsManagingRemoveRolePatch);
            const localVarPath = `/usermanager/api/v1/accessrights/managing/removeRole`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication OAuth2PasswordBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(bodyRemoveRoleApiV1AccessrightsManagingRemoveRolePatch, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Check if user has specified roles
         * @summary User Has Roles
         * @param {Array<string>} roles
         * @param {string} login Target user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AccessrightsManagingUserHasRoles: (roles, login, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'roles' is not null or undefined
            common_1.assertParamExists('apiV1AccessrightsManagingUserHasRoles', 'roles', roles);
            // verify required parameter 'login' is not null or undefined
            common_1.assertParamExists('apiV1AccessrightsManagingUserHasRoles', 'login', login);
            const localVarPath = `/usermanager/api/v1/accessrights/managing/userHasRoles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication OAuth2PasswordBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration);
            if (roles) {
                localVarQueryParameter['roles'] = roles;
            }
            if (login !== undefined) {
                localVarQueryParameter['login'] = login;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Retrieves list of all user privileges.
         * @summary User Privileges
         * @param {string} login Target user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AccessrightsManagingUserPrivileges: (login, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'login' is not null or undefined
            common_1.assertParamExists('apiV1AccessrightsManagingUserPrivileges', 'login', login);
            const localVarPath = `/usermanager/api/v1/accessrights/managing/userprivileges`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication OAuth2PasswordBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration);
            if (login !== undefined) {
                localVarQueryParameter['login'] = login;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Gets all the roles for specified user
         * @summary User Roles
         * @param {string} login Target user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AccessrightsManagingUserRoles: (login, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'login' is not null or undefined
            common_1.assertParamExists('apiV1AccessrightsManagingUserRoles', 'login', login);
            const localVarPath = `/usermanager/api/v1/accessrights/managing/userRoles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication OAuth2PasswordBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration);
            if (login !== undefined) {
                localVarQueryParameter['login'] = login;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get all users with specified roles
         * @summary Users With Roles
         * @param {Array<string>} roles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AccessrightsManagingUsersWithRoles: (roles, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'roles' is not null or undefined
            common_1.assertParamExists('apiV1AccessrightsManagingUsersWithRoles', 'roles', roles);
            const localVarPath = `/usermanager/api/v1/accessrights/managing/usersWithRoles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication OAuth2PasswordBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration);
            if (roles) {
                localVarQueryParameter['roles'] = roles;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create new privilege.
         * @summary Create Privilege
         * @param {Privilege} privilege
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AccessrightsPrivilegesCreatePrivilege: (privilege, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'privilege' is not null or undefined
            common_1.assertParamExists('apiV1AccessrightsPrivilegesCreatePrivilege', 'privilege', privilege);
            const localVarPath = `/usermanager/api/v1/accessrights/privileges/privilege`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication OAuth2PasswordBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(privilege, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Delete Privilege
         * @param {BodyDeletePrivilegeApiV1AccessrightsPrivilegesPrivilegeDelete} bodyDeletePrivilegeApiV1AccessrightsPrivilegesPrivilegeDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AccessrightsPrivilegesDeletePrivilege: (bodyDeletePrivilegeApiV1AccessrightsPrivilegesPrivilegeDelete, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'bodyDeletePrivilegeApiV1AccessrightsPrivilegesPrivilegeDelete' is not null or undefined
            common_1.assertParamExists('apiV1AccessrightsPrivilegesDeletePrivilege', 'bodyDeletePrivilegeApiV1AccessrightsPrivilegesPrivilegeDelete', bodyDeletePrivilegeApiV1AccessrightsPrivilegesPrivilegeDelete);
            const localVarPath = `/usermanager/api/v1/accessrights/privileges/privilege`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication OAuth2PasswordBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(bodyDeletePrivilegeApiV1AccessrightsPrivilegesPrivilegeDelete, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns list of all possible privileges
         * @summary Get All
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AccessrightsPrivilegesGetAll: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/usermanager/api/v1/accessrights/privileges/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary User Has Privilege
         * @param {Array<string>} [privileges]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AccessrightsPrivilegesUserHasPrivilege: (privileges, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/usermanager/api/v1/accessrights/privileges/hasPrivilege`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication OAuth2PasswordBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration);
            if (privileges) {
                localVarQueryParameter['privileges'] = privileges;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Creates new role
         * @summary Create Role
         * @param {Role} role
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AccessrightsRolesCreateRole: (role, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'role' is not null or undefined
            common_1.assertParamExists('apiV1AccessrightsRolesCreateRole', 'role', role);
            const localVarPath = `/usermanager/api/v1/accessrights/roles/role`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication OAuth2PasswordBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(role, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Deletes role
         * @summary Delete Role
         * @param {BodyDeleteRoleApiV1AccessrightsRolesRoleDelete} bodyDeleteRoleApiV1AccessrightsRolesRoleDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AccessrightsRolesDeleteRole: (bodyDeleteRoleApiV1AccessrightsRolesRoleDelete, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'bodyDeleteRoleApiV1AccessrightsRolesRoleDelete' is not null or undefined
            common_1.assertParamExists('apiV1AccessrightsRolesDeleteRole', 'bodyDeleteRoleApiV1AccessrightsRolesRoleDelete', bodyDeleteRoleApiV1AccessrightsRolesRoleDelete);
            const localVarPath = `/usermanager/api/v1/accessrights/roles/role`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication OAuth2PasswordBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(bodyDeleteRoleApiV1AccessrightsRolesRoleDelete, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get list of all privileges assigned to specified role
         * @summary Get Role Privileges
         * @param {string} roleName Target user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AccessrightsRolesGetRolePrivileges: (roleName, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'roleName' is not null or undefined
            common_1.assertParamExists('apiV1AccessrightsRolesGetRolePrivileges', 'roleName', roleName);
            const localVarPath = `/usermanager/api/v1/accessrights/roles/rolePrivileges`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (roleName !== undefined) {
                localVarQueryParameter['roleName'] = roleName;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Gets all existed roles
         * @summary Roles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AccessrightsRolesRoles: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/usermanager/api/v1/accessrights/roles/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * AccessRightsApi - functional programming interface
 * @export
 */
exports.AccessRightsApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.AccessRightsApiAxiosParamCreator(configuration);
    return {
        /**
         * Assigns privilege to the role
         * @summary Assign Privilege
         * @param {BodyAssignPrivilegeApiV1AccessrightsManagingAssignPrivilegePatch} bodyAssignPrivilegeApiV1AccessrightsManagingAssignPrivilegePatch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AccessrightsManagingAssignPrivilege(bodyAssignPrivilegeApiV1AccessrightsManagingAssignPrivilegePatch, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiV1AccessrightsManagingAssignPrivilege(bodyAssignPrivilegeApiV1AccessrightsManagingAssignPrivilegePatch, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Assign Role
         * @param {BodyAssignRoleApiV1AccessrightsManagingAssignRolePatch} bodyAssignRoleApiV1AccessrightsManagingAssignRolePatch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AccessrightsManagingAssignRole(bodyAssignRoleApiV1AccessrightsManagingAssignRolePatch, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiV1AccessrightsManagingAssignRole(bodyAssignRoleApiV1AccessrightsManagingAssignRolePatch, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Removes privilege from the role
         * @summary Remove Privilege
         * @param {BodyRemovePrivilegeApiV1AccessrightsManagingRemovePrivilegePatch} bodyRemovePrivilegeApiV1AccessrightsManagingRemovePrivilegePatch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AccessrightsManagingRemovePrivilege(bodyRemovePrivilegeApiV1AccessrightsManagingRemovePrivilegePatch, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiV1AccessrightsManagingRemovePrivilege(bodyRemovePrivilegeApiV1AccessrightsManagingRemovePrivilegePatch, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Removes role from the user
         * @summary Remove Role
         * @param {BodyRemoveRoleApiV1AccessrightsManagingRemoveRolePatch} bodyRemoveRoleApiV1AccessrightsManagingRemoveRolePatch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AccessrightsManagingRemoveRole(bodyRemoveRoleApiV1AccessrightsManagingRemoveRolePatch, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiV1AccessrightsManagingRemoveRole(bodyRemoveRoleApiV1AccessrightsManagingRemoveRolePatch, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Check if user has specified roles
         * @summary User Has Roles
         * @param {Array<string>} roles
         * @param {string} login Target user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AccessrightsManagingUserHasRoles(roles, login, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiV1AccessrightsManagingUserHasRoles(roles, login, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Retrieves list of all user privileges.
         * @summary User Privileges
         * @param {string} login Target user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AccessrightsManagingUserPrivileges(login, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiV1AccessrightsManagingUserPrivileges(login, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Gets all the roles for specified user
         * @summary User Roles
         * @param {string} login Target user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AccessrightsManagingUserRoles(login, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiV1AccessrightsManagingUserRoles(login, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get all users with specified roles
         * @summary Users With Roles
         * @param {Array<string>} roles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AccessrightsManagingUsersWithRoles(roles, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiV1AccessrightsManagingUsersWithRoles(roles, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Create new privilege.
         * @summary Create Privilege
         * @param {Privilege} privilege
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AccessrightsPrivilegesCreatePrivilege(privilege, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiV1AccessrightsPrivilegesCreatePrivilege(privilege, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Delete Privilege
         * @param {BodyDeletePrivilegeApiV1AccessrightsPrivilegesPrivilegeDelete} bodyDeletePrivilegeApiV1AccessrightsPrivilegesPrivilegeDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AccessrightsPrivilegesDeletePrivilege(bodyDeletePrivilegeApiV1AccessrightsPrivilegesPrivilegeDelete, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiV1AccessrightsPrivilegesDeletePrivilege(bodyDeletePrivilegeApiV1AccessrightsPrivilegesPrivilegeDelete, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Returns list of all possible privileges
         * @summary Get All
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AccessrightsPrivilegesGetAll(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiV1AccessrightsPrivilegesGetAll(options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary User Has Privilege
         * @param {Array<string>} [privileges]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AccessrightsPrivilegesUserHasPrivilege(privileges, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiV1AccessrightsPrivilegesUserHasPrivilege(privileges, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Creates new role
         * @summary Create Role
         * @param {Role} role
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AccessrightsRolesCreateRole(role, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiV1AccessrightsRolesCreateRole(role, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Deletes role
         * @summary Delete Role
         * @param {BodyDeleteRoleApiV1AccessrightsRolesRoleDelete} bodyDeleteRoleApiV1AccessrightsRolesRoleDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AccessrightsRolesDeleteRole(bodyDeleteRoleApiV1AccessrightsRolesRoleDelete, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiV1AccessrightsRolesDeleteRole(bodyDeleteRoleApiV1AccessrightsRolesRoleDelete, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get list of all privileges assigned to specified role
         * @summary Get Role Privileges
         * @param {string} roleName Target user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AccessrightsRolesGetRolePrivileges(roleName, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiV1AccessrightsRolesGetRolePrivileges(roleName, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Gets all existed roles
         * @summary Roles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AccessrightsRolesRoles(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiV1AccessrightsRolesRoles(options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
/**
 * AccessRightsApi - factory interface
 * @export
 */
exports.AccessRightsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.AccessRightsApiFp(configuration);
    return {
        /**
         * Assigns privilege to the role
         * @summary Assign Privilege
         * @param {BodyAssignPrivilegeApiV1AccessrightsManagingAssignPrivilegePatch} bodyAssignPrivilegeApiV1AccessrightsManagingAssignPrivilegePatch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AccessrightsManagingAssignPrivilege(bodyAssignPrivilegeApiV1AccessrightsManagingAssignPrivilegePatch, options) {
            return localVarFp.apiV1AccessrightsManagingAssignPrivilege(bodyAssignPrivilegeApiV1AccessrightsManagingAssignPrivilegePatch, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Assign Role
         * @param {BodyAssignRoleApiV1AccessrightsManagingAssignRolePatch} bodyAssignRoleApiV1AccessrightsManagingAssignRolePatch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AccessrightsManagingAssignRole(bodyAssignRoleApiV1AccessrightsManagingAssignRolePatch, options) {
            return localVarFp.apiV1AccessrightsManagingAssignRole(bodyAssignRoleApiV1AccessrightsManagingAssignRolePatch, options).then((request) => request(axios, basePath));
        },
        /**
         * Removes privilege from the role
         * @summary Remove Privilege
         * @param {BodyRemovePrivilegeApiV1AccessrightsManagingRemovePrivilegePatch} bodyRemovePrivilegeApiV1AccessrightsManagingRemovePrivilegePatch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AccessrightsManagingRemovePrivilege(bodyRemovePrivilegeApiV1AccessrightsManagingRemovePrivilegePatch, options) {
            return localVarFp.apiV1AccessrightsManagingRemovePrivilege(bodyRemovePrivilegeApiV1AccessrightsManagingRemovePrivilegePatch, options).then((request) => request(axios, basePath));
        },
        /**
         * Removes role from the user
         * @summary Remove Role
         * @param {BodyRemoveRoleApiV1AccessrightsManagingRemoveRolePatch} bodyRemoveRoleApiV1AccessrightsManagingRemoveRolePatch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AccessrightsManagingRemoveRole(bodyRemoveRoleApiV1AccessrightsManagingRemoveRolePatch, options) {
            return localVarFp.apiV1AccessrightsManagingRemoveRole(bodyRemoveRoleApiV1AccessrightsManagingRemoveRolePatch, options).then((request) => request(axios, basePath));
        },
        /**
         * Check if user has specified roles
         * @summary User Has Roles
         * @param {Array<string>} roles
         * @param {string} login Target user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AccessrightsManagingUserHasRoles(roles, login, options) {
            return localVarFp.apiV1AccessrightsManagingUserHasRoles(roles, login, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves list of all user privileges.
         * @summary User Privileges
         * @param {string} login Target user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AccessrightsManagingUserPrivileges(login, options) {
            return localVarFp.apiV1AccessrightsManagingUserPrivileges(login, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets all the roles for specified user
         * @summary User Roles
         * @param {string} login Target user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AccessrightsManagingUserRoles(login, options) {
            return localVarFp.apiV1AccessrightsManagingUserRoles(login, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all users with specified roles
         * @summary Users With Roles
         * @param {Array<string>} roles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AccessrightsManagingUsersWithRoles(roles, options) {
            return localVarFp.apiV1AccessrightsManagingUsersWithRoles(roles, options).then((request) => request(axios, basePath));
        },
        /**
         * Create new privilege.
         * @summary Create Privilege
         * @param {Privilege} privilege
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AccessrightsPrivilegesCreatePrivilege(privilege, options) {
            return localVarFp.apiV1AccessrightsPrivilegesCreatePrivilege(privilege, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Delete Privilege
         * @param {BodyDeletePrivilegeApiV1AccessrightsPrivilegesPrivilegeDelete} bodyDeletePrivilegeApiV1AccessrightsPrivilegesPrivilegeDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AccessrightsPrivilegesDeletePrivilege(bodyDeletePrivilegeApiV1AccessrightsPrivilegesPrivilegeDelete, options) {
            return localVarFp.apiV1AccessrightsPrivilegesDeletePrivilege(bodyDeletePrivilegeApiV1AccessrightsPrivilegesPrivilegeDelete, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns list of all possible privileges
         * @summary Get All
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AccessrightsPrivilegesGetAll(options) {
            return localVarFp.apiV1AccessrightsPrivilegesGetAll(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary User Has Privilege
         * @param {Array<string>} [privileges]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AccessrightsPrivilegesUserHasPrivilege(privileges, options) {
            return localVarFp.apiV1AccessrightsPrivilegesUserHasPrivilege(privileges, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates new role
         * @summary Create Role
         * @param {Role} role
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AccessrightsRolesCreateRole(role, options) {
            return localVarFp.apiV1AccessrightsRolesCreateRole(role, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes role
         * @summary Delete Role
         * @param {BodyDeleteRoleApiV1AccessrightsRolesRoleDelete} bodyDeleteRoleApiV1AccessrightsRolesRoleDelete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AccessrightsRolesDeleteRole(bodyDeleteRoleApiV1AccessrightsRolesRoleDelete, options) {
            return localVarFp.apiV1AccessrightsRolesDeleteRole(bodyDeleteRoleApiV1AccessrightsRolesRoleDelete, options).then((request) => request(axios, basePath));
        },
        /**
         * Get list of all privileges assigned to specified role
         * @summary Get Role Privileges
         * @param {string} roleName Target user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AccessrightsRolesGetRolePrivileges(roleName, options) {
            return localVarFp.apiV1AccessrightsRolesGetRolePrivileges(roleName, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets all existed roles
         * @summary Roles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AccessrightsRolesRoles(options) {
            return localVarFp.apiV1AccessrightsRolesRoles(options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * AccessRightsApi - object-oriented interface
 * @export
 * @class AccessRightsApi
 * @extends {BaseAPI}
 */
class AccessRightsApi extends base_1.BaseAPI {
    /**
     * Assigns privilege to the role
     * @summary Assign Privilege
     * @param {BodyAssignPrivilegeApiV1AccessrightsManagingAssignPrivilegePatch} bodyAssignPrivilegeApiV1AccessrightsManagingAssignPrivilegePatch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessRightsApi
     */
    apiV1AccessrightsManagingAssignPrivilege(bodyAssignPrivilegeApiV1AccessrightsManagingAssignPrivilegePatch, options) {
        return exports.AccessRightsApiFp(this.configuration).apiV1AccessrightsManagingAssignPrivilege(bodyAssignPrivilegeApiV1AccessrightsManagingAssignPrivilegePatch, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Assign Role
     * @param {BodyAssignRoleApiV1AccessrightsManagingAssignRolePatch} bodyAssignRoleApiV1AccessrightsManagingAssignRolePatch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessRightsApi
     */
    apiV1AccessrightsManagingAssignRole(bodyAssignRoleApiV1AccessrightsManagingAssignRolePatch, options) {
        return exports.AccessRightsApiFp(this.configuration).apiV1AccessrightsManagingAssignRole(bodyAssignRoleApiV1AccessrightsManagingAssignRolePatch, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Removes privilege from the role
     * @summary Remove Privilege
     * @param {BodyRemovePrivilegeApiV1AccessrightsManagingRemovePrivilegePatch} bodyRemovePrivilegeApiV1AccessrightsManagingRemovePrivilegePatch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessRightsApi
     */
    apiV1AccessrightsManagingRemovePrivilege(bodyRemovePrivilegeApiV1AccessrightsManagingRemovePrivilegePatch, options) {
        return exports.AccessRightsApiFp(this.configuration).apiV1AccessrightsManagingRemovePrivilege(bodyRemovePrivilegeApiV1AccessrightsManagingRemovePrivilegePatch, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Removes role from the user
     * @summary Remove Role
     * @param {BodyRemoveRoleApiV1AccessrightsManagingRemoveRolePatch} bodyRemoveRoleApiV1AccessrightsManagingRemoveRolePatch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessRightsApi
     */
    apiV1AccessrightsManagingRemoveRole(bodyRemoveRoleApiV1AccessrightsManagingRemoveRolePatch, options) {
        return exports.AccessRightsApiFp(this.configuration).apiV1AccessrightsManagingRemoveRole(bodyRemoveRoleApiV1AccessrightsManagingRemoveRolePatch, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Check if user has specified roles
     * @summary User Has Roles
     * @param {Array<string>} roles
     * @param {string} login Target user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessRightsApi
     */
    apiV1AccessrightsManagingUserHasRoles(roles, login, options) {
        return exports.AccessRightsApiFp(this.configuration).apiV1AccessrightsManagingUserHasRoles(roles, login, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves list of all user privileges.
     * @summary User Privileges
     * @param {string} login Target user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessRightsApi
     */
    apiV1AccessrightsManagingUserPrivileges(login, options) {
        return exports.AccessRightsApiFp(this.configuration).apiV1AccessrightsManagingUserPrivileges(login, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Gets all the roles for specified user
     * @summary User Roles
     * @param {string} login Target user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessRightsApi
     */
    apiV1AccessrightsManagingUserRoles(login, options) {
        return exports.AccessRightsApiFp(this.configuration).apiV1AccessrightsManagingUserRoles(login, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get all users with specified roles
     * @summary Users With Roles
     * @param {Array<string>} roles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessRightsApi
     */
    apiV1AccessrightsManagingUsersWithRoles(roles, options) {
        return exports.AccessRightsApiFp(this.configuration).apiV1AccessrightsManagingUsersWithRoles(roles, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create new privilege.
     * @summary Create Privilege
     * @param {Privilege} privilege
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessRightsApi
     */
    apiV1AccessrightsPrivilegesCreatePrivilege(privilege, options) {
        return exports.AccessRightsApiFp(this.configuration).apiV1AccessrightsPrivilegesCreatePrivilege(privilege, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Delete Privilege
     * @param {BodyDeletePrivilegeApiV1AccessrightsPrivilegesPrivilegeDelete} bodyDeletePrivilegeApiV1AccessrightsPrivilegesPrivilegeDelete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessRightsApi
     */
    apiV1AccessrightsPrivilegesDeletePrivilege(bodyDeletePrivilegeApiV1AccessrightsPrivilegesPrivilegeDelete, options) {
        return exports.AccessRightsApiFp(this.configuration).apiV1AccessrightsPrivilegesDeletePrivilege(bodyDeletePrivilegeApiV1AccessrightsPrivilegesPrivilegeDelete, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns list of all possible privileges
     * @summary Get All
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessRightsApi
     */
    apiV1AccessrightsPrivilegesGetAll(options) {
        return exports.AccessRightsApiFp(this.configuration).apiV1AccessrightsPrivilegesGetAll(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary User Has Privilege
     * @param {Array<string>} [privileges]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessRightsApi
     */
    apiV1AccessrightsPrivilegesUserHasPrivilege(privileges, options) {
        return exports.AccessRightsApiFp(this.configuration).apiV1AccessrightsPrivilegesUserHasPrivilege(privileges, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Creates new role
     * @summary Create Role
     * @param {Role} role
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessRightsApi
     */
    apiV1AccessrightsRolesCreateRole(role, options) {
        return exports.AccessRightsApiFp(this.configuration).apiV1AccessrightsRolesCreateRole(role, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes role
     * @summary Delete Role
     * @param {BodyDeleteRoleApiV1AccessrightsRolesRoleDelete} bodyDeleteRoleApiV1AccessrightsRolesRoleDelete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessRightsApi
     */
    apiV1AccessrightsRolesDeleteRole(bodyDeleteRoleApiV1AccessrightsRolesRoleDelete, options) {
        return exports.AccessRightsApiFp(this.configuration).apiV1AccessrightsRolesDeleteRole(bodyDeleteRoleApiV1AccessrightsRolesRoleDelete, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get list of all privileges assigned to specified role
     * @summary Get Role Privileges
     * @param {string} roleName Target user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessRightsApi
     */
    apiV1AccessrightsRolesGetRolePrivileges(roleName, options) {
        return exports.AccessRightsApiFp(this.configuration).apiV1AccessrightsRolesGetRolePrivileges(roleName, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Gets all existed roles
     * @summary Roles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessRightsApi
     */
    apiV1AccessrightsRolesRoles(options) {
        return exports.AccessRightsApiFp(this.configuration).apiV1AccessrightsRolesRoles(options).then((request) => request(this.axios, this.basePath));
    }
}
exports.AccessRightsApi = AccessRightsApi;
/**
 * AuthApi - axios parameter creator
 * @export
 */
exports.AuthApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Creates key similar to access token, but without expire time. This key will be stored at server and can be revoked at any moment.
         * @summary Create Api Key
         * @param {string} username
         * @param {string} password
         * @param {string} [grantType]
         * @param {string} [scope]
         * @param {string} [clientId]
         * @param {string} [clientSecret]
         * @param {string} [apikeyDescription]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthApikeysCreateApiKey: (username, password, grantType, scope, clientId, clientSecret, apikeyDescription, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'username' is not null or undefined
            common_1.assertParamExists('apiV1AuthApikeysCreateApiKey', 'username', username);
            // verify required parameter 'password' is not null or undefined
            common_1.assertParamExists('apiV1AuthApikeysCreateApiKey', 'password', password);
            const localVarPath = `/usermanager/api/v1/auth/apikeys/apikey`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new URLSearchParams();
            if (grantType !== undefined) {
                localVarFormParams.set('grant_type', grantType);
            }
            if (username !== undefined) {
                localVarFormParams.set('username', username);
            }
            if (password !== undefined) {
                localVarFormParams.set('password', password);
            }
            if (scope !== undefined) {
                localVarFormParams.set('scope', scope);
            }
            if (clientId !== undefined) {
                localVarFormParams.set('client_id', clientId);
            }
            if (clientSecret !== undefined) {
                localVarFormParams.set('client_secret', clientSecret);
            }
            if (apikeyDescription !== undefined) {
                localVarFormParams.set('apikey_description', apikeyDescription);
            }
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = localVarFormParams.toString();
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Delete Api Key
         * @param {APIKeyRequest} aPIKeyRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthApikeysDeleteApiKey: (aPIKeyRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'aPIKeyRequest' is not null or undefined
            common_1.assertParamExists('apiV1AuthApikeysDeleteApiKey', 'aPIKeyRequest', aPIKeyRequest);
            const localVarPath = `/usermanager/api/v1/auth/apikeys/apikey`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication OAuth2PasswordBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(aPIKeyRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get Api Keys
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthApikeysGetApiKeys: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/usermanager/api/v1/auth/apikeys/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication OAuth2PasswordBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Is Token Valid
         * @param {Token} token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthIsTokenValid: (token, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'token' is not null or undefined
            common_1.assertParamExists('apiV1AuthIsTokenValid', 'token', token);
            const localVarPath = `/usermanager/api/v1/auth/checkToken`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(token, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Allows to create access token.  Use scopes for definig access privileges. If no scopes defined -  token with all possible scopes for current user will be generated. If you just want empty token - add global_empty scope.
         * @summary Login For Access Token
         * @param {string} username
         * @param {string} password
         * @param {string} [grantType]
         * @param {string} [scope]
         * @param {string} [clientId]
         * @param {string} [clientSecret]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthLoginForAccessToken: (username, password, grantType, scope, clientId, clientSecret, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'username' is not null or undefined
            common_1.assertParamExists('apiV1AuthLoginForAccessToken', 'username', username);
            // verify required parameter 'password' is not null or undefined
            common_1.assertParamExists('apiV1AuthLoginForAccessToken', 'password', password);
            const localVarPath = `/usermanager/api/v1/auth/token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new URLSearchParams();
            if (grantType !== undefined) {
                localVarFormParams.set('grant_type', grantType);
            }
            if (username !== undefined) {
                localVarFormParams.set('username', username);
            }
            if (password !== undefined) {
                localVarFormParams.set('password', password);
            }
            if (scope !== undefined) {
                localVarFormParams.set('scope', scope);
            }
            if (clientId !== undefined) {
                localVarFormParams.set('client_id', clientId);
            }
            if (clientSecret !== undefined) {
                localVarFormParams.set('client_secret', clientSecret);
            }
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = localVarFormParams.toString();
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * AuthApi - functional programming interface
 * @export
 */
exports.AuthApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.AuthApiAxiosParamCreator(configuration);
    return {
        /**
         * Creates key similar to access token, but without expire time. This key will be stored at server and can be revoked at any moment.
         * @summary Create Api Key
         * @param {string} username
         * @param {string} password
         * @param {string} [grantType]
         * @param {string} [scope]
         * @param {string} [clientId]
         * @param {string} [clientSecret]
         * @param {string} [apikeyDescription]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthApikeysCreateApiKey(username, password, grantType, scope, clientId, clientSecret, apikeyDescription, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiV1AuthApikeysCreateApiKey(username, password, grantType, scope, clientId, clientSecret, apikeyDescription, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Delete Api Key
         * @param {APIKeyRequest} aPIKeyRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthApikeysDeleteApiKey(aPIKeyRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiV1AuthApikeysDeleteApiKey(aPIKeyRequest, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Get Api Keys
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthApikeysGetApiKeys(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiV1AuthApikeysGetApiKeys(options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Is Token Valid
         * @param {Token} token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthIsTokenValid(token, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiV1AuthIsTokenValid(token, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Allows to create access token.  Use scopes for definig access privileges. If no scopes defined -  token with all possible scopes for current user will be generated. If you just want empty token - add global_empty scope.
         * @summary Login For Access Token
         * @param {string} username
         * @param {string} password
         * @param {string} [grantType]
         * @param {string} [scope]
         * @param {string} [clientId]
         * @param {string} [clientSecret]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthLoginForAccessToken(username, password, grantType, scope, clientId, clientSecret, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiV1AuthLoginForAccessToken(username, password, grantType, scope, clientId, clientSecret, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
/**
 * AuthApi - factory interface
 * @export
 */
exports.AuthApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.AuthApiFp(configuration);
    return {
        /**
         * Creates key similar to access token, but without expire time. This key will be stored at server and can be revoked at any moment.
         * @summary Create Api Key
         * @param {string} username
         * @param {string} password
         * @param {string} [grantType]
         * @param {string} [scope]
         * @param {string} [clientId]
         * @param {string} [clientSecret]
         * @param {string} [apikeyDescription]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthApikeysCreateApiKey(username, password, grantType, scope, clientId, clientSecret, apikeyDescription, options) {
            return localVarFp.apiV1AuthApikeysCreateApiKey(username, password, grantType, scope, clientId, clientSecret, apikeyDescription, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Delete Api Key
         * @param {APIKeyRequest} aPIKeyRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthApikeysDeleteApiKey(aPIKeyRequest, options) {
            return localVarFp.apiV1AuthApikeysDeleteApiKey(aPIKeyRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get Api Keys
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthApikeysGetApiKeys(options) {
            return localVarFp.apiV1AuthApikeysGetApiKeys(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Is Token Valid
         * @param {Token} token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthIsTokenValid(token, options) {
            return localVarFp.apiV1AuthIsTokenValid(token, options).then((request) => request(axios, basePath));
        },
        /**
         * Allows to create access token.  Use scopes for definig access privileges. If no scopes defined -  token with all possible scopes for current user will be generated. If you just want empty token - add global_empty scope.
         * @summary Login For Access Token
         * @param {string} username
         * @param {string} password
         * @param {string} [grantType]
         * @param {string} [scope]
         * @param {string} [clientId]
         * @param {string} [clientSecret]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthLoginForAccessToken(username, password, grantType, scope, clientId, clientSecret, options) {
            return localVarFp.apiV1AuthLoginForAccessToken(username, password, grantType, scope, clientId, clientSecret, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
class AuthApi extends base_1.BaseAPI {
    /**
     * Creates key similar to access token, but without expire time. This key will be stored at server and can be revoked at any moment.
     * @summary Create Api Key
     * @param {string} username
     * @param {string} password
     * @param {string} [grantType]
     * @param {string} [scope]
     * @param {string} [clientId]
     * @param {string} [clientSecret]
     * @param {string} [apikeyDescription]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    apiV1AuthApikeysCreateApiKey(username, password, grantType, scope, clientId, clientSecret, apikeyDescription, options) {
        return exports.AuthApiFp(this.configuration).apiV1AuthApikeysCreateApiKey(username, password, grantType, scope, clientId, clientSecret, apikeyDescription, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Delete Api Key
     * @param {APIKeyRequest} aPIKeyRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    apiV1AuthApikeysDeleteApiKey(aPIKeyRequest, options) {
        return exports.AuthApiFp(this.configuration).apiV1AuthApikeysDeleteApiKey(aPIKeyRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get Api Keys
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    apiV1AuthApikeysGetApiKeys(options) {
        return exports.AuthApiFp(this.configuration).apiV1AuthApikeysGetApiKeys(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Is Token Valid
     * @param {Token} token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    apiV1AuthIsTokenValid(token, options) {
        return exports.AuthApiFp(this.configuration).apiV1AuthIsTokenValid(token, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Allows to create access token.  Use scopes for definig access privileges. If no scopes defined -  token with all possible scopes for current user will be generated. If you just want empty token - add global_empty scope.
     * @summary Login For Access Token
     * @param {string} username
     * @param {string} password
     * @param {string} [grantType]
     * @param {string} [scope]
     * @param {string} [clientId]
     * @param {string} [clientSecret]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    apiV1AuthLoginForAccessToken(username, password, grantType, scope, clientId, clientSecret, options) {
        return exports.AuthApiFp(this.configuration).apiV1AuthLoginForAccessToken(username, password, grantType, scope, clientId, clientSecret, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.AuthApi = AuthApi;
/**
 * UsersApi - axios parameter creator
 * @export
 */
exports.UsersApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Checks if user can manage listed user with provided privilege candidate. Returns list of user that he can manage
         * @summary Canimanage
         * @param {string} privilegeCandidate
         * @param {Array<number>} [userId] Checks for these users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UsersCanIManage: (privilegeCandidate, userId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'privilegeCandidate' is not null or undefined
            common_1.assertParamExists('apiV1UsersCanIManage', 'privilegeCandidate', privilegeCandidate);
            const localVarPath = `/usermanager/api/v1/users/canIManage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication OAuth2PasswordBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration);
            if (privilegeCandidate !== undefined) {
                localVarQueryParameter['privilegeCandidate'] = privilegeCandidate;
            }
            if (userId) {
                localVarQueryParameter['user_id'] = userId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Change user password to new one
         * @summary Change Password
         * @param {BodyChangePasswordApiV1UsersChangePasswordPatch} bodyChangePasswordApiV1UsersChangePasswordPatch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UsersChangePassword: (bodyChangePasswordApiV1UsersChangePasswordPatch, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'bodyChangePasswordApiV1UsersChangePasswordPatch' is not null or undefined
            common_1.assertParamExists('apiV1UsersChangePassword', 'bodyChangePasswordApiV1UsersChangePasswordPatch', bodyChangePasswordApiV1UsersChangePasswordPatch);
            const localVarPath = `/usermanager/api/v1/users/changePassword`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(bodyChangePasswordApiV1UsersChangePasswordPatch, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Create User
         * @param {BodyCreateUserApiV1UsersUserPost} bodyCreateUserApiV1UsersUserPost
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UsersCreateUser: (bodyCreateUserApiV1UsersUserPost, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'bodyCreateUserApiV1UsersUserPost' is not null or undefined
            common_1.assertParamExists('apiV1UsersCreateUser', 'bodyCreateUserApiV1UsersUserPost', bodyCreateUserApiV1UsersUserPost);
            const localVarPath = `/usermanager/api/v1/users/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication OAuth2PasswordBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(bodyCreateUserApiV1UsersUserPost, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Get User
         * @param {number} [userId] Get only user with specified id.
         * @param {string} [login] Return user with specified login. Login should match exactly.
         * @param {string} [loginSubstring] Return user that has in login specified substring.
         * @param {string} [role] Return user with specified role. Role should match exactly.
         * @param {boolean} [active] Return users which has provided status.
         * @param {Array<string>} [values] Only return specified fields.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UsersGetUser: (userId, login, loginSubstring, role, active, values, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/usermanager/api/v1/users/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication OAuth2PasswordBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration);
            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }
            if (login !== undefined) {
                localVarQueryParameter['login'] = login;
            }
            if (loginSubstring !== undefined) {
                localVarQueryParameter['login_substring'] = loginSubstring;
            }
            if (role !== undefined) {
                localVarQueryParameter['role'] = role;
            }
            if (active !== undefined) {
                localVarQueryParameter['active'] = active;
            }
            if (values) {
                localVarQueryParameter['values'] = values;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns True if user is active. Otherwise False
         * @summary Is User Active
         * @param {string} login Target user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UsersIsUserActive: (login, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'login' is not null or undefined
            common_1.assertParamExists('apiV1UsersIsUserActive', 'login', login);
            const localVarPath = `/usermanager/api/v1/users/isActive`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication OAuth2PasswordBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration);
            if (login !== undefined) {
                localVarQueryParameter['login'] = login;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Set user password to random one. Doesnt require to know old password.  Requires additional manage_users privileges.  Requester should be authorized with token that has at least all the target user privileges.
         * @summary Reset Password
         * @param {BodyResetPasswordApiV1UsersResetPasswordPatch} bodyResetPasswordApiV1UsersResetPasswordPatch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UsersResetPassword: (bodyResetPasswordApiV1UsersResetPasswordPatch, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'bodyResetPasswordApiV1UsersResetPasswordPatch' is not null or undefined
            common_1.assertParamExists('apiV1UsersResetPassword', 'bodyResetPasswordApiV1UsersResetPasswordPatch', bodyResetPasswordApiV1UsersResetPasswordPatch);
            const localVarPath = `/usermanager/api/v1/users/resetPassword`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication OAuth2PasswordBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(bodyResetPasswordApiV1UsersResetPasswordPatch, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Activates or deactivates user. Deactivated users have no previleges and can do nothing inside system.
         * @summary Setactive User
         * @param {BodySetActiveUserApiV1UsersSetActivePatch} bodySetActiveUserApiV1UsersSetActivePatch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UsersSetActiveUser: (bodySetActiveUserApiV1UsersSetActivePatch, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'bodySetActiveUserApiV1UsersSetActivePatch' is not null or undefined
            common_1.assertParamExists('apiV1UsersSetActiveUser', 'bodySetActiveUserApiV1UsersSetActivePatch', bodySetActiveUserApiV1UsersSetActivePatch);
            const localVarPath = `/usermanager/api/v1/users/setActive`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication OAuth2PasswordBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(bodySetActiveUserApiV1UsersSetActivePatch, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Whocanimanage
         * @param {string} privilegeCandidate
         * @param {string} [specificRole]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UsersWhoCanIManage: (privilegeCandidate, specificRole, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'privilegeCandidate' is not null or undefined
            common_1.assertParamExists('apiV1UsersWhoCanIManage', 'privilegeCandidate', privilegeCandidate);
            const localVarPath = `/usermanager/api/v1/users/whoCanIManage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication OAuth2PasswordBearer required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration);
            if (privilegeCandidate !== undefined) {
                localVarQueryParameter['privilegeCandidate'] = privilegeCandidate;
            }
            if (specificRole !== undefined) {
                localVarQueryParameter['specificRole'] = specificRole;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * UsersApi - functional programming interface
 * @export
 */
exports.UsersApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.UsersApiAxiosParamCreator(configuration);
    return {
        /**
         * Checks if user can manage listed user with provided privilege candidate. Returns list of user that he can manage
         * @summary Canimanage
         * @param {string} privilegeCandidate
         * @param {Array<number>} [userId] Checks for these users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UsersCanIManage(privilegeCandidate, userId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiV1UsersCanIManage(privilegeCandidate, userId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Change user password to new one
         * @summary Change Password
         * @param {BodyChangePasswordApiV1UsersChangePasswordPatch} bodyChangePasswordApiV1UsersChangePasswordPatch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UsersChangePassword(bodyChangePasswordApiV1UsersChangePasswordPatch, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiV1UsersChangePassword(bodyChangePasswordApiV1UsersChangePasswordPatch, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Create User
         * @param {BodyCreateUserApiV1UsersUserPost} bodyCreateUserApiV1UsersUserPost
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UsersCreateUser(bodyCreateUserApiV1UsersUserPost, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiV1UsersCreateUser(bodyCreateUserApiV1UsersUserPost, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Get User
         * @param {number} [userId] Get only user with specified id.
         * @param {string} [login] Return user with specified login. Login should match exactly.
         * @param {string} [loginSubstring] Return user that has in login specified substring.
         * @param {string} [role] Return user with specified role. Role should match exactly.
         * @param {boolean} [active] Return users which has provided status.
         * @param {Array<string>} [values] Only return specified fields.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UsersGetUser(userId, login, loginSubstring, role, active, values, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiV1UsersGetUser(userId, login, loginSubstring, role, active, values, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Returns True if user is active. Otherwise False
         * @summary Is User Active
         * @param {string} login Target user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UsersIsUserActive(login, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiV1UsersIsUserActive(login, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Set user password to random one. Doesnt require to know old password.  Requires additional manage_users privileges.  Requester should be authorized with token that has at least all the target user privileges.
         * @summary Reset Password
         * @param {BodyResetPasswordApiV1UsersResetPasswordPatch} bodyResetPasswordApiV1UsersResetPasswordPatch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UsersResetPassword(bodyResetPasswordApiV1UsersResetPasswordPatch, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiV1UsersResetPassword(bodyResetPasswordApiV1UsersResetPasswordPatch, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Activates or deactivates user. Deactivated users have no previleges and can do nothing inside system.
         * @summary Setactive User
         * @param {BodySetActiveUserApiV1UsersSetActivePatch} bodySetActiveUserApiV1UsersSetActivePatch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UsersSetActiveUser(bodySetActiveUserApiV1UsersSetActivePatch, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiV1UsersSetActiveUser(bodySetActiveUserApiV1UsersSetActivePatch, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Whocanimanage
         * @param {string} privilegeCandidate
         * @param {string} [specificRole]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UsersWhoCanIManage(privilegeCandidate, specificRole, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiV1UsersWhoCanIManage(privilegeCandidate, specificRole, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
/**
 * UsersApi - factory interface
 * @export
 */
exports.UsersApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.UsersApiFp(configuration);
    return {
        /**
         * Checks if user can manage listed user with provided privilege candidate. Returns list of user that he can manage
         * @summary Canimanage
         * @param {string} privilegeCandidate
         * @param {Array<number>} [userId] Checks for these users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UsersCanIManage(privilegeCandidate, userId, options) {
            return localVarFp.apiV1UsersCanIManage(privilegeCandidate, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * Change user password to new one
         * @summary Change Password
         * @param {BodyChangePasswordApiV1UsersChangePasswordPatch} bodyChangePasswordApiV1UsersChangePasswordPatch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UsersChangePassword(bodyChangePasswordApiV1UsersChangePasswordPatch, options) {
            return localVarFp.apiV1UsersChangePassword(bodyChangePasswordApiV1UsersChangePasswordPatch, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Create User
         * @param {BodyCreateUserApiV1UsersUserPost} bodyCreateUserApiV1UsersUserPost
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UsersCreateUser(bodyCreateUserApiV1UsersUserPost, options) {
            return localVarFp.apiV1UsersCreateUser(bodyCreateUserApiV1UsersUserPost, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get User
         * @param {number} [userId] Get only user with specified id.
         * @param {string} [login] Return user with specified login. Login should match exactly.
         * @param {string} [loginSubstring] Return user that has in login specified substring.
         * @param {string} [role] Return user with specified role. Role should match exactly.
         * @param {boolean} [active] Return users which has provided status.
         * @param {Array<string>} [values] Only return specified fields.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UsersGetUser(userId, login, loginSubstring, role, active, values, options) {
            return localVarFp.apiV1UsersGetUser(userId, login, loginSubstring, role, active, values, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns True if user is active. Otherwise False
         * @summary Is User Active
         * @param {string} login Target user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UsersIsUserActive(login, options) {
            return localVarFp.apiV1UsersIsUserActive(login, options).then((request) => request(axios, basePath));
        },
        /**
         * Set user password to random one. Doesnt require to know old password.  Requires additional manage_users privileges.  Requester should be authorized with token that has at least all the target user privileges.
         * @summary Reset Password
         * @param {BodyResetPasswordApiV1UsersResetPasswordPatch} bodyResetPasswordApiV1UsersResetPasswordPatch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UsersResetPassword(bodyResetPasswordApiV1UsersResetPasswordPatch, options) {
            return localVarFp.apiV1UsersResetPassword(bodyResetPasswordApiV1UsersResetPasswordPatch, options).then((request) => request(axios, basePath));
        },
        /**
         * Activates or deactivates user. Deactivated users have no previleges and can do nothing inside system.
         * @summary Setactive User
         * @param {BodySetActiveUserApiV1UsersSetActivePatch} bodySetActiveUserApiV1UsersSetActivePatch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UsersSetActiveUser(bodySetActiveUserApiV1UsersSetActivePatch, options) {
            return localVarFp.apiV1UsersSetActiveUser(bodySetActiveUserApiV1UsersSetActivePatch, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Whocanimanage
         * @param {string} privilegeCandidate
         * @param {string} [specificRole]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UsersWhoCanIManage(privilegeCandidate, specificRole, options) {
            return localVarFp.apiV1UsersWhoCanIManage(privilegeCandidate, specificRole, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
class UsersApi extends base_1.BaseAPI {
    /**
     * Checks if user can manage listed user with provided privilege candidate. Returns list of user that he can manage
     * @summary Canimanage
     * @param {string} privilegeCandidate
     * @param {Array<number>} [userId] Checks for these users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    apiV1UsersCanIManage(privilegeCandidate, userId, options) {
        return exports.UsersApiFp(this.configuration).apiV1UsersCanIManage(privilegeCandidate, userId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Change user password to new one
     * @summary Change Password
     * @param {BodyChangePasswordApiV1UsersChangePasswordPatch} bodyChangePasswordApiV1UsersChangePasswordPatch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    apiV1UsersChangePassword(bodyChangePasswordApiV1UsersChangePasswordPatch, options) {
        return exports.UsersApiFp(this.configuration).apiV1UsersChangePassword(bodyChangePasswordApiV1UsersChangePasswordPatch, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Create User
     * @param {BodyCreateUserApiV1UsersUserPost} bodyCreateUserApiV1UsersUserPost
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    apiV1UsersCreateUser(bodyCreateUserApiV1UsersUserPost, options) {
        return exports.UsersApiFp(this.configuration).apiV1UsersCreateUser(bodyCreateUserApiV1UsersUserPost, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get User
     * @param {number} [userId] Get only user with specified id.
     * @param {string} [login] Return user with specified login. Login should match exactly.
     * @param {string} [loginSubstring] Return user that has in login specified substring.
     * @param {string} [role] Return user with specified role. Role should match exactly.
     * @param {boolean} [active] Return users which has provided status.
     * @param {Array<string>} [values] Only return specified fields.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    apiV1UsersGetUser(userId, login, loginSubstring, role, active, values, options) {
        return exports.UsersApiFp(this.configuration).apiV1UsersGetUser(userId, login, loginSubstring, role, active, values, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns True if user is active. Otherwise False
     * @summary Is User Active
     * @param {string} login Target user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    apiV1UsersIsUserActive(login, options) {
        return exports.UsersApiFp(this.configuration).apiV1UsersIsUserActive(login, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Set user password to random one. Doesnt require to know old password.  Requires additional manage_users privileges.  Requester should be authorized with token that has at least all the target user privileges.
     * @summary Reset Password
     * @param {BodyResetPasswordApiV1UsersResetPasswordPatch} bodyResetPasswordApiV1UsersResetPasswordPatch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    apiV1UsersResetPassword(bodyResetPasswordApiV1UsersResetPasswordPatch, options) {
        return exports.UsersApiFp(this.configuration).apiV1UsersResetPassword(bodyResetPasswordApiV1UsersResetPasswordPatch, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Activates or deactivates user. Deactivated users have no previleges and can do nothing inside system.
     * @summary Setactive User
     * @param {BodySetActiveUserApiV1UsersSetActivePatch} bodySetActiveUserApiV1UsersSetActivePatch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    apiV1UsersSetActiveUser(bodySetActiveUserApiV1UsersSetActivePatch, options) {
        return exports.UsersApiFp(this.configuration).apiV1UsersSetActiveUser(bodySetActiveUserApiV1UsersSetActivePatch, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Whocanimanage
     * @param {string} privilegeCandidate
     * @param {string} [specificRole]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    apiV1UsersWhoCanIManage(privilegeCandidate, specificRole, options) {
        return exports.UsersApiFp(this.configuration).apiV1UsersWhoCanIManage(privilegeCandidate, specificRole, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.UsersApi = UsersApi;
